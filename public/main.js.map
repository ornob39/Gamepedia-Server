{"version":3,"sources":["./src/environments/environment.ts","./src/app/services/http.service.ts","./src/app/components/home/home.component.html","./src/app/components/home/home.component.ts","./src/app/auth.service.ts","./src/app/login/login.component.html","./src/app/login/login.component.ts","./src/app/register/register.component.html","./src/app/register/register.component.ts","./src/app/homepage/homepage.component.html","./src/app/homepage/homepage.component.ts","./src/app/components/game-tabs/game-tabs.component.html","./src/app/components/game-tabs/game-tabs.component.ts","./src/app/components/details/details.component.html","./src/app/components/details/details.component.ts","./src/app/auth.guard.ts","./src/app/app-routing.module.ts","./src/app/navigation/sidenav/sidenav.component.ts","./src/app/navigation/sidenav/sidenav.component.html","./src/app/components/search-bar/search-bar.component.ts","./src/app/components/search-bar/search-bar.component.html","./src/app/navigation/header/header.component.html","./src/app/navigation/header/header.component.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/interceptors/http-headers.interceptor.ts","./src/app/interceptors/http-errors.interceptor.ts","./src/app/token-interceptor.service.ts","./src/app/app.module.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":["environment","HttpService","http","ordering","search","params","set","this","get","id","gameInfoRequest","console","log","gameTrailersRequest","gameScreenshotsRequest","forkJoin","pipe","map","resp","screenshots","results","trailers","HomeComponent","httpService","router","activatedRoute","routeSub","subscribe","searchGames","sort","gameSub","getGameList","gameList","games","err","status","navigate","unsubscribe","AuthService","_router","_snackBar","_registerUrl","_loginUrl","user","post","localStorage","getItem","removeItem","open","duration","LoginComponent","_auth","loginUserData","email","password","loginUser","res","setItem","token","error","form","onSubmit","RegisterComponent","registeredUserData","registerUser","_authService","HomepageComponent","slides","image","new_titles","slides_best","best_titles","slides_10","top10_titles","GameTabsComponent","DetailsComponent","ActivatedRoute","gameRating","gameId","getGameDetails","gameResp","game","setTimeout","metacritic","value","AuthGuard","loggedIn","routes","path","component","canActivate","AppRoutingModule","forRoot","SidenavComponent","closeSidenav","emit","onClose","onLogout","SearchBarComponent","HeaderComponent","sidenavToggle","onToggleSidenav","AppComponent","title","HttpHeadersInterceptor","req","next","clone","setHeaders","setParams","key","handle","HttpErrorsInterceptor","catchError","TokenInterceptorService","injector","authService","tokenizedReq","Authorization","getToken","AppModule","provide","useClass","multi","bootstrapModule","catch","webpackEmptyAsyncContext","Promise","resolve","then","e","Error","code","keys","module","exports"],"mappings":"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","file":"main.js","sourcesContent":["// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  BASE_URL: 'https://rawg-video-games-database.p.rapidapi.com',\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { forkJoin, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { environment as env } from 'src/environments/environment';\nimport { APIResponse, Game } from '../model';\n@Injectable({\n  providedIn: 'root',\n})\nexport class HttpService {\n  constructor(private http: HttpClient) {}\n\n  getGameList(\n    ordering: string,\n    search?: string\n  ): Observable<APIResponse<Game>> {\n    let params = new HttpParams().set('ordering', ordering);\n\n    if (search) {\n      params = new HttpParams().set('ordering', ordering).set('search', search);\n    }\n\n    return this.http.get<APIResponse<Game>>(`${env.BASE_URL}/games`, {\n      params: params,\n    });\n  }\n\n  getGameDetails(id: string): Observable<Game> {\n    const gameInfoRequest = this.http.get(`${env.BASE_URL}/games/${id}`);\n    console.log('gameInfo --- ' + gameInfoRequest);\n    const gameTrailersRequest = this.http.get(\n      `${env.BASE_URL}/games/${id}/movies`\n    );\n    console.log('gameTrailers --- ' + gameTrailersRequest);\n    const gameScreenshotsRequest = this.http.get(\n      `${env.BASE_URL}/games/${id}/screenshots`\n    );\n    console.log('gameScreenShots --- ' + gameScreenshotsRequest);\n\n    return forkJoin({\n      gameInfoRequest,\n      gameScreenshotsRequest,\n      gameTrailersRequest,\n    }).pipe(\n      map((resp: any) => {\n        return {\n          ...resp['gameInfoRequest'],\n          screenshots: resp['gameScreenshotsRequest']?.results,\n          trailers: resp['gameTrailersRequest']?.results,\n        };\n      })\n    );\n  }\n}\n","<mat-form-field appearance=\"fill\" class=\"selector-form\">\n    <mat-label style=\"color: white !important\">\n        <h3>\n            Sort Games by &nbsp;\n            <mat-icon matSuffix>arrow_circle_down</mat-icon>\n        </h3>\n    </mat-label>\n\n    <mat-select class=\"select-panel\" panelClass=\"sort-select\" [(ngModel)]=\"sort\" (selectionChange)=\"searchGames(sort)\">\n        <mat-option value=\"name\" class=\"matoption\">Name</mat-option>\n        <mat-option class=\"matoption\" value=\"-released\">Released</mat-option>\n        <mat-option class=\"matoption\" value=\"-added\">Added</mat-option>\n        <mat-option class=\"matoption\" value=\"-created\">Created</mat-option>\n        <mat-option class=\"matoption\" value=\"-updated\">Updated</mat-option>\n        <mat-option class=\"matoption\" value=\"-rating\">Rating</mat-option>\n        <mat-option class=\"matoption\" value=\"metacritic\">Metacritic</mat-option>\n    </mat-select>\n</mat-form-field>\n\n<div class=\"container-fluid\">\n    <div class=\"games\">\n        <ng-container *ngFor=\"let game of games\">\n            <!-- adauga event ca sa putem vedea detalii despre joc (dupa id) -->\n            <div class=\"game\" (click)=\"openGameDetails(game.id)\">\n                <div class=\"game-thumb-container\">\n                    <img *ngIf=\"game.background_image\" src=\"{{ game.background_image }}\" alt=\"thumbnail\" class=\"game-thumbnail\" />\n                    <p *ngIf=\"!game.background_image\">No image</p>\n                </div>\n                <div class=\"game-description\">\n                    <p class=\"game-name\">{{ game.name }}</p>\n                    <div class=\"game-platforms\">\n                        <img *ngFor=\"let gamePlatform of game.parent_platforms\" class=\"game-platform\" src=\"assets/images/platforms/{{ gamePlatform.platform.slug }}.svg\" alt=\"{{ gamePlatform.platform.slug }}\" />\n                    </div>\n                </div>\n            </div>\n        </ng-container>\n    </div>\n</div>","import { HttpErrorResponse } from '@angular/common/http';\nimport { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute, Params, Router } from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { APIResponse, Game } from 'src/app/model';\nimport { HttpService } from 'src/app/services/http.service';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.scss'],\n})\nexport class HomeComponent implements OnInit, OnDestroy {\n  public sort: string;\n  public games: Array<Game>;\n  private routeSub: Subscription;\n  private gameSub: Subscription;\n\n  constructor(\n    private httpService: HttpService,\n    private router: Router,\n    private activatedRoute: ActivatedRoute\n  ) {}\n\n   ngOnInit() {\n    this.routeSub = this.activatedRoute.params.subscribe((params: Params) => {\n      if (params['game-search']) {\n        this.searchGames('metacrit', params['game-search']);\n      } else {\n        this.searchGames('metacrit');\n      }\n    });\n  }\n\n   searchGames(sort: string, search?: string) {\n    this.gameSub = ( this.httpService.getGameList(sort, search)).subscribe(\n      (gameList: APIResponse<Game>) => {\n        this.games = gameList.results;\n      },\n      (err) => {\n        if (err instanceof HttpErrorResponse) {\n          if (err.status === 401) {\n            this.router.navigate(['/login']);\n          }\n        }\n      }\n    );\n  }\n\n   openGameDetails(id: string) {\n    this.router.navigate(['details', id]);\n  }\n\n   ngOnDestroy() {\n    if (this.gameSub) {\n      this.gameSub.unsubscribe();\n    }\n\n    if (this.routeSub) {\n      this.routeSub.unsubscribe();\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  private _registerUrl = '/api/register';\n  private _loginUrl = '/api/login';\n  constructor(\n    private http: HttpClient,\n    private _router: Router,\n    private _snackBar: MatSnackBar\n  ) {}\n\n  // Registration through POST method(email and password)\n  registerUser(user) {\n    return this.http.post<any>(this._registerUrl, user);\n  }\n  // Login through POST method(email and password)\n  loginUser(user) {\n    return this.http.post<any>(this._loginUrl, user);\n  }\n\n  loggedIn() {\n    return !!localStorage.getItem('token');\n  }\n  //User Logout//\n\n  logoutUser() {\n    localStorage.removeItem('token');\n    this._router.navigate(['/default']);\n  }\n\n  //\n\n  //Snackbar//\n  notLogged() {\n    if (!!localStorage.getItem('token') == false) {\n      this._router.navigate(['/login']);\n      this._snackBar.open('Login to Access Website', 'Clear', {\n        duration: 3000,\n      });\n    }\n  }\n  notLoggedPromt() {\n    if (!!localStorage.getItem('token') == false) {\n      this._snackBar.open('Login to View More Contents', 'Clear', {\n        duration: 3000,\n      });\n    }\n  }\n\n  wrongPassword() {\n    if (!!localStorage.getItem('token') == false) {\n      this._snackBar.open('Wrong Credentials', 'Clear', {\n        duration: 3000,\n      });\n    }\n  }\n\n  getToken() {\n    return localStorage.getItem('token');\n  }\n}\n","<div fxFlex fxLayout fxLayoutAlign=\"center center\">\n    <div fxFlex fxLayout=\"row\" fxLayoutAlign=\"center  center\">\n        <section class=\"signup-form\">\n            <div fxFlex fxLayout=\"column\" fxLayoutAlign=\"center  center\">\n                <mat-card class=\"container signup-card\" fxLayout=\"column\" fxLayoutAlign=\"center center\">\n                    <mat-card-header appearance=\"fill\" class=\"card-header\" fxLayout=\"column\" fxLayoutAlign=\"center center\">\n                        Login with your credentials\n                    </mat-card-header>\n                    <div class=\"row\">\n                        <mat-card-content>\n                            <form appearance=\"outline\" fxLayout=\"column\" fxLayoutAlign=\"center center\" fxLayoutGap=\"10px\" #f=\"ngForm\" (ngSubmit)=\"onSubmit(f)\">\n                                <mat-form-field appearance=\"outline\">\n                                    <mat-label>Enter Email</mat-label>\n                                    <input [(ngModel)]=\"loginUserData.email\" name=\"email\" matInput type=\"email\" placeholder=\"Your email\" ngModel email required #emailInput=\"ngModel\" />\n                                    <mat-icon matSuffix>email</mat-icon>\n                                    <mat-error *ngIf=\"emailInput.hasError('required')\">Empty Email</mat-error>\n                                    <mat-error *ngIf=\"!emailInput.hasError('required')\">Invalid Email</mat-error>\n                                </mat-form-field>\n                                <mat-form-field appearance=\"outline\" hintLabel=\"Should be atleast 6 characters long\">\n                                    <mat-label>Enter Password</mat-label>\n                                    <input [(ngModel)]=\"loginUserData.password\" name=\"password\" matInput type=\"password\" placeholder=\"Your password\" ngModel required minLength=\"6\" #pwInput=\"ngModel\" />\n                                    <mat-icon matSuffix>password</mat-icon>\n                                    <mat-hint align=\"end\">{{ pwInput.value?.length }} / 6</mat-hint>\n                                    <mat-error>Small Password!</mat-error>\n                                </mat-form-field>\n\n                                <button (click)=\"loginUser()\" (click)=\"_auth.wrongPassword()\" type=\"submit\" id=\"submit\" class=\"submit-btn\" mat-flat-button [disabled]=\"f.invalid\" style=\"margin-top: 20px\">\n                  Login\n                </button>\n                            </form>\n                        </mat-card-content>\n                    </div>\n                </mat-card>\n            </div>\n        </section>\n    </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { AuthService } from '../auth.service';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss'],\n})\nexport class LoginComponent implements OnInit {\n  loginUserData = { email: '', password: '' };\n\n  constructor(\n    public _auth: AuthService,\n    private _snackBar: MatSnackBar,\n    private _router: Router\n  ) {}\n\n  ngOnInit() {}\n\n  loginUser() {\n    this._auth.loginUser(this.loginUserData).subscribe(\n      (res) => {\n\n        localStorage.setItem('token', res.token);\n        this._snackBar.open('Login Successful!', 'Clear', { duration: 3000 });\n        this._router.navigate(['/home']);\n      },\n      (err) => console.error(err)\n    );\n  }\n  onSubmit(form: NgForm) {}\n}\n","<div fxFlex fxLayout fxLayoutAlign=\"center center\">\n    <div fxFlex fxLayout=\"row\" fxLayoutAlign=\"center  center\">\n        <section class=\"signup-form\">\n            <div fxFlex fxLayout=\"column\" fxLayoutAlign=\"center  center\">\n                <mat-card class=\"container signup-card\" fxLayout=\"column\" fxLayoutAlign=\"center center\">\n                    <mat-card-header appearance=\"fill\" class=\"card-header\" fxLayout=\"column\" fxLayoutAlign=\"center center\">\n                        Please register using valid email and password\n                    </mat-card-header>\n                    <div class=\"col\">\n                        <mat-card-content>\n                            <form appearance=\"outline\" fxLayout=\"column\" fxLayoutAlign=\"center center\" fxLayoutGap=\"10px\" #f=\"ngForm\" (ngSubmit)=\"onSubmit(f)\">\n                                <mat-form-field appearance=\"outline\">\n                                    <mat-label>Enter Email</mat-label>\n                                    <input [(ngModel)]=\"registeredUserData.email\" name=\"email\" matInput type=\"email\" placeholder=\"Your email\" ngModel email required #emailInput=\"ngModel\" />\n                                    <mat-icon matSuffix>email</mat-icon>\n                                    <mat-error *ngIf=\"emailInput.hasError('required')\">Empty Email</mat-error>\n                                    <mat-error *ngIf=\"!emailInput.hasError('required')\">Invalid Email</mat-error>\n                                </mat-form-field>\n                                <mat-form-field appearance=\"outline\" hintLabel=\"Should be atleast 6 characters long\">\n                                    <mat-label>Enter Password</mat-label>\n                                    <input [(ngModel)]=\"registeredUserData.password\" name=\"password\" matInput type=\"password\" placeholder=\"Your password\" ngModel required minLength=\"6\" #pwInput=\"ngModel\" />\n                                    <mat-icon matSuffix>password</mat-icon>\n                                    <mat-hint align=\"end\">{{ pwInput.value?.length }} / 6</mat-hint>\n                                    <mat-error>Small Password!</mat-error>\n                                </mat-form-field>\n\n                                <button (click)=\"registerUser()\" type=\"submit\" id=\"submit\" class=\"submit-btn\" mat-raised-button [disabled]=\"f.invalid\" style=\"margin-top: 20px\">\n                  Signup\n                </button>\n                            </form>\n                        </mat-card-content>\n                    </div>\n                </mat-card>\n            </div>\n        </section>\n    </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { AuthService } from '../auth.service';\nimport { Router } from '@angular/router';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.scss'],\n})\nexport class RegisterComponent implements OnInit {\n  registeredUserData = { email: '', password: '' };\n\n  constructor(\n    private _auth: AuthService,\n    private _router: Router,\n    private _snackBar: MatSnackBar\n  ) {}\n\n  ngOnInit() {}\n\n  registerUser() {\n    this._auth.registerUser(this.registeredUserData).subscribe(\n      (res) => {\n\n        localStorage.setItem('token', res.token);\n        this._snackBar.open('Signup Successful!', 'Clear', { duration: 3000 });\n        this._router.navigate(['/home']);\n      },\n      (err) => console.log(err)\n    );\n  }\n\n  onSubmit(form: NgForm) {}\n}\n","<div class=\"jumbotron\">\r\n    <h1 class=\"display-4\">Gamepedia</h1>\r\n    <h1 class=\"display-4\">Your Home of All Favorite Games</h1>\r\n    <p class=\"lead\">\r\n        Search games from our database, watch trailers, find screenshots and get the metacritic rating all in from one page\r\n    </p>\r\n    <hr class=\"my-4\" />\r\n\r\n    <a class=\"btn btn-primary btn-lg\" routerLink=\"/register\" role=\"button\">Get Started by Signing up</a\r\n  >\r\n</div>\r\n\r\n<div class=\"container\">\r\n  <div class=\"col\">\r\n    <mat-card class=\"card\">\r\n      <div class=\"col\">\r\n        <!-- Newly Released Games -->\r\n        <mat-card-header\r\n          class=\"card-header\"\r\n          fxLayout=\"row\"\r\n          fxLayoutAlign=\"center center\"\r\n        >\r\n          <h2 class=\"header-content\">New and trending</h2>\r\n        </mat-card-header>\r\n      </div>\r\n      <div class=\"col\">\r\n        <mat-card-content class=\"slide-image\">\r\n          <mat-carousel\r\n            maintainAspectRatio=\"true\"\r\n            timings=\"500ms ease-in\"\r\n            [autoplay]=\"true\"\r\n            interval=\"5000\"\r\n            color=\"primary\"\r\n            maxWidth=\"auto\"\r\n            proportion=\"40\"\r\n            slides=\"5\"\r\n            [loop]=\"true\"\r\n            [hideArrows]=\"true\"\r\n            [hideIndicators]=\"true\"\r\n            [useKeyboard]=\"true\"\r\n            [useMouseWheel]=\"true\"\r\n            orientation=\"ltr\"\r\n          >\r\n            <mat-carousel-slide\r\n              #matCarouselSlide\r\n              *ngFor=\"let slide of slides; let i = index\"\r\n              [image]=\"slide.image\"\r\n              overlayColor=\"#00000040\"\r\n              [hideOverlay]=\"false\"\r\n            >\r\n              <div class=\"col\">\r\n                <mat-card-footer\r\n                  class=\"card-footer\"\r\n                  fxLayout=\"row\"\r\n                  fxLayoutAlign=\"center center\"\r\n                >\r\n                  <button\r\n                    fxLayout=\"row\"\r\n                    fxLayoutAlign=\"end end\"\r\n                    class=\"footer-btn\"\r\n                    mat-raised-button\r\n                    style=\"background-color: #ffffff00\"\r\n                  >\r\n                    <p\r\n                      class=\"card-paragraph\"\r\n                      style=\"text-transform: uppercase; margin: auto\"\r\n                    >\r\n                      {{ new_titles[i] }}\r\n                    </p>\r\n                  </button>\r\n                </mat-card-footer>\r\n                <mat-card-footer\r\n                  (click)=\"openGameDetails(new_titles[i])\"\r\n                  (click)=\"_authService.notLogged()\"\r\n                  fxLayout=\"col\"\r\n                  fxLayoutAlign=\"end end\"\r\n                  class=\"card-footer\"\r\n                >\r\n                  <button\r\n                    (click)=\"openGameDetails(new_titles[i])\"\r\n                    (click)=\"_authService.notLogged()\"\r\n                    fxLayout=\"row\"\r\n                    fxLayoutAlign=\"center center\"\r\n                    class=\"footer-btn\"\r\n                    mat-raised-button\r\n                    style=\"background-color: #ffffff00\"\r\n                  >\r\n                    <p\r\n                      class=\"card-paragraph\"\r\n                      style=\"text-transform: uppercase; margin: auto\"\r\n                    >\r\n                      Show Details\r\n                    </p>\r\n                  </button>\r\n                </mat-card-footer>\r\n              </div>\r\n            </mat-carousel-slide>\r\n          </mat-carousel>\r\n        </mat-card-content>\r\n      </div>\r\n    </mat-card>\r\n  </div>\r\n  <mat-divider></mat-divider>\r\n  <div class=\"col\">\r\n    <mat-card class=\"card\">\r\n      <!-- Best of the year -->\r\n      <mat-card-header\r\n        class=\"card-header\"\r\n        fxLayout=\"row\"\r\n        fxLayoutAlign=\"center center\"\r\n      >\r\n        <h2 class=\"header-content\">Popular in 2021</h2>\r\n      </mat-card-header>\r\n      <mat-card-content class=\"slide-image\">\r\n        <mat-carousel\r\n          maintainAspectRatio=\"true\"\r\n          timings=\"500ms ease-in\"\r\n          [autoplay]=\"true\"\r\n          interval=\"5000\"\r\n          color=\"primary\"\r\n          maxWidth=\"auto\"\r\n          proportion=\"40\"\r\n          slides=\"5\"\r\n          [loop]=\"true\"\r\n          [hideArrows]=\"true\"\r\n          [hideIndicators]=\"true\"\r\n          [useKeyboard]=\"true\"\r\n          [useMouseWheel]=\"true\"\r\n          orientation=\"ltr\"\r\n        >\r\n          <mat-carousel-slide\r\n            #matCarouselSlide\r\n            *ngFor=\"let slide of slides_best; let i = index\"\r\n            [image]=\"slide.image\"\r\n            overlayColor=\"#00000040\"\r\n            [hideOverlay]=\"false\"\r\n          >\r\n            <mat-card-footer\r\n              (click)=\"openGameDetails(best_titles[i])\"\r\n              fxLayout=\"row\"\r\n              fxLayoutAlign=\"center center\"\r\n              class=\"card-footer\"\r\n            >\r\n              <button\r\n                (click)=\"openGameDetails(best_titles[i])\"\r\n                (click)=\"_authService.notLogged()\"\r\n                fxLayout=\"row\"\r\n                fxLayoutAlign=\"center center\"\r\n                class=\"footer-btn\"\r\n                mat-raised-button\r\n                style=\"background-color: #ffffff00\"\r\n              >\r\n                <p\r\n                  class=\"card-paragraph\"\r\n                  style=\"text-transform: uppercase; margin: auto\"\r\n                >\r\n                  {{ best_titles[i] }}\r\n                </p>\r\n              </button>\r\n            </mat-card-footer>\r\n            <mat-card-footer\r\n              (click)=\"openGameDetails(best_titles[i])\"\r\n              (click)=\"_authService.notLogged()\"\r\n              fxLayout=\"col\"\r\n              fxLayoutAlign=\"end end\"\r\n              class=\"card-footer\"\r\n            >\r\n              <button\r\n                (click)=\"openGameDetails(best_titles[i])\"\r\n                (click)=\"_authService.notLogged()\"\r\n                fxLayout=\"row\"\r\n                fxLayoutAlign=\"center center\"\r\n                class=\"footer-btn\"\r\n                mat-raised-button\r\n                style=\"background-color: #ffffff00\"\r\n              >\r\n                <p\r\n                  class=\"card-paragraph\"\r\n                  style=\"text-transform: uppercase; margin: auto\"\r\n                >\r\n                  Show Details\r\n                </p>\r\n              </button>\r\n            </mat-card-footer>\r\n          </mat-carousel-slide>\r\n        </mat-carousel>\r\n      </mat-card-content>\r\n    </mat-card>\r\n  </div>\r\n  <mat-divider></mat-divider>\r\n  <div class=\"col\">\r\n    <mat-card class=\"card\">\r\n      <!-- Top 10 all time -->\r\n      <mat-card-header\r\n        class=\"card-header\"\r\n        fxLayout=\"row\"\r\n        fxLayoutAlign=\"center center\"\r\n      >\r\n        <h2 class=\"header-content\">All Time top 10</h2>\r\n      </mat-card-header>\r\n      <mat-card-content class=\"slide-image\">\r\n        <mat-carousel\r\n          maintainAspectRatio=\"true\"\r\n          timings=\"500ms ease-in\"\r\n          [autoplay]=\"true\"\r\n          interval=\"5000\"\r\n          color=\"primary\"\r\n          maxWidth=\"auto\"\r\n          proportion=\"40\"\r\n          slides=\"10\"\r\n          [loop]=\"true\"\r\n          [hideArrows]=\"true\"\r\n          [hideIndicators]=\"true\"\r\n          [useKeyboard]=\"true\"\r\n          [useMouseWheel]=\"true\"\r\n          orientation=\"ltr\"\r\n        >\r\n          <mat-carousel-slide\r\n            #matCarouselSlide\r\n            *ngFor=\"let slide of slides_10; let i = index\"\r\n            [image]=\"slide.image\"\r\n            overlayColor=\"#00000040\"\r\n            [hideOverlay]=\"false\"\r\n          >\r\n            <mat-card-footer\r\n              (click)=\"openGameDetails(top10_titles[i])\"\r\n              fxLayout=\"row\"\r\n              fxLayoutAlign=\"center center\"\r\n              class=\"card-footer\"\r\n            >\r\n              <button\r\n                (click)=\"openGameDetails(top10_titles[i])\"\r\n                (click)=\"_authService.notLogged()\"\r\n                fxLayout=\"row\"\r\n                fxLayoutAlign=\"center center\"\r\n                class=\"footer-btn\"\r\n                mat-raised-button\r\n                style=\"background-color: #ffffff00\"\r\n              >\r\n                <p\r\n                  class=\"card-paragraph\"\r\n                  style=\"text-transform: uppercase; margin: auto\"\r\n                >\r\n                  {{ top10_titles[i] }}\r\n                </p>\r\n              </button>\r\n            </mat-card-footer>\r\n            <mat-card-footer\r\n              (click)=\"openGameDetails(top10_titles[i])\"\r\n              (click)=\"_authService.notLogged()\"\r\n              fxLayout=\"col\"\r\n              fxLayoutAlign=\"end end\"\r\n              class=\"card-footer\"\r\n            >\r\n              <button\r\n                (click)=\"openGameDetails(top10_titles[i])\"\r\n                (click)=\"_authService.notLogged()\"\r\n                fxLayout=\"row\"\r\n                fxLayoutAlign=\"center center\"\r\n                class=\"footer-btn\"\r\n                mat-raised-button\r\n                style=\"background-color: #ffffff00\"\r\n              >\r\n                <p\r\n                  class=\"card-paragraph\"\r\n                  style=\"text-transform: uppercase; margin: auto\"\r\n                >\r\n                  Show Details\r\n                </p>\r\n              </button>\r\n            </mat-card-footer>\r\n          </mat-carousel-slide>\r\n        </mat-carousel>\r\n      </mat-card-content>\r\n    </mat-card>\r\n  </div>\r\n</div>","import { Component, OnInit } from '@angular/core';\n\nimport { Router } from '@angular/router';\n\nimport { AuthService } from '../auth.service';\n\n@Component({\n  selector: 'app-homepage',\n  templateUrl: './homepage.component.html',\n  styleUrls: ['./homepage.component.scss'],\n})\nexport class HomepageComponent implements OnInit {\n  constructor(private router: Router, public _authService: AuthService) {}\n\n  ngOnInit(): void {}\n\n  //New Released\n  slides = [\n    { image: '../../assets/Homepage/Slides/new/new1.jpg' },\n    { image: '../../assets/Homepage/Slides/new/new2.jpg' },\n    { image: '../../assets/Homepage/Slides/new/new3.jpg' },\n    { image: '../../assets/Homepage/Slides/new/new4jpg.jpg' },\n    { image: '../../assets/Homepage/Slides/new/new5.jpg' },\n  ];\n  new_titles = [\n    'vampire-the-masquerade-bloodlines-2',\n    'outriders',\n    'halo-infinite',\n    'resident-evil-village',\n    'stalker-2',\n  ];\n\n  //Best of the year\n  slides_best = [\n    { image: '../../assets/Homepage/Slides/best/1.png' },\n    { image: '../../assets/Homepage/Slides/best/2.jpg' },\n    { image: '../../assets/Homepage/Slides/best/3.jpg' },\n    { image: '../../assets/Homepage/Slides/best/4.jpg' },\n    { image: '../../assets/Homepage/Slides/best/5.png' },\n  ];\n\n  best_titles = [\n    'cyberpunk-2077',\n    'biomutant',\n    'hitman-3',\n    'far-cry-6',\n    'ghostwire-tokio',\n  ];\n\n  slides_10 = [\n    { image: '../../assets/Homepage/Slides/top10/1.jpg' },\n    { image: '../../assets/Homepage/Slides/top10/2.jpg' },\n    { image: '../../assets/Homepage/Slides/top10/3.jpg' },\n    { image: '../../assets/Homepage/Slides/top10/4.jpg' },\n    { image: '../../assets/Homepage/Slides/top10/5.jpg' },\n    { image: '../../assets/Homepage/Slides/top10/6.jpg' },\n    { image: '../../assets/Homepage/Slides/top10/7.jpg' },\n    { image: '../../assets/Homepage/Slides/top10/8.jpg' },\n    { image: '../../assets/Homepage/Slides/top10/9.jpg' },\n    { image: '../../assets/Homepage/Slides/top10/10.jpg' },\n  ];\n  top10_titles = [\n    'the-witcher-3-wild-hunt',\n    'the-last-of-us',\n    'the-legend-of-zelda-breath-of-the-wild',\n    'red-dead-redemption-2',\n    'god-of-war-2',\n    'uncharted-4-a-thiefs-end',\n    'half-life-2',\n    'grand-theft-auto-v',\n    'mafia-the-city-of-lost-heaven',\n    'dark-souls-iii',\n  ];\n\n  //Navigate to details\n   openGameDetails(id: string) {\n    this.router.navigate(['details', id]);\n    console.log('clicked');\n  }\n}\n","<div class=\"game-tabs\">\n    <mat-tab-group mat-align-tabs=\"start\" backgroundColor=\"primary\">\n        <mat-tab label=\"About\">\n            <p *ngIf=\"game.parent_platforms?.length\" class=\"game-tabs-par\">\n                Platfoms:\n                <span *ngFor=\"let game of game.parent_platforms; let last = last\">{{ game.platform.name }}<span *ngIf=\"!last\">, </span></span>\n            </p>\n            <p *ngIf=\"game.publishers?.length\" class=\"game-tabs-par\">\n                Publishers:\n                <span *ngFor=\"let publisher of game.publishers; let last = last\">{{ publisher.name }}<span *ngIf=\"!last\">, </span></span>\n            </p>\n            <p *ngIf=\"game.website\" class=\"game-tabs-par\">\n                Website:\n                <a class=\"game-tabs-link\" href=\"{{ game.website }}\" target=\"_blank\">{{\n          game.website\n        }}</a>\n            </p>\n            <hr />\n            <div *ngIf=\"game.description\" [innerHTML]=\"game.description\" class=\"game-description\"></div>\n            <p class=\"game-tabs-votes\">\n                <ng-container *ngFor=\"let votes of game.ratings\">\n                    <!-- afisam rating cu exceptional -->\n                    <span *ngIf=\"votes.title === 'exceptional'\">\n            <mat-icon class=\"game-tabs-votes-up\">thumb_up</mat-icon>\n            <!-- daca nu sunt voturi afisam 0 -->\n            <span class=\"game-tabs-votes-count\">{{ votes.count || 0 }}</span>\n                    </span>\n                    <!-- afisam rating cu skip -->\n                    <span *ngIf=\"votes.title === 'skip'\">\n            <mat-icon class=\"game-tabs-votes-down\">thumb_down</mat-icon>\n            <!-- daca nu sunt voturi afisam 0 -->\n            <span class=\"game-tabs-votes-count\">{{ votes.count || 0 }}</span>\n                    </span>\n                </ng-container>\n            </p>\n        </mat-tab>\n\n        <mat-tab label=\"Screenshots\" *ngIf=\"game.screenshots?.length\">\n            <img *ngFor=\"let screenshot of game.screenshots\" src=\"{{ screenshot.image }}\" class=\"game-screenshot\" alt=\"screenshot\" />\n        </mat-tab>\n        <mat-tab label=\"Trailers\" *ngIf=\"game.trailers?.length\">\n            <video class=\"game-trailer\" controls *ngFor=\"let trailer of game.trailers\">\n        <source src=\"{{ trailer.data?.max }}\" type=\"video/mp4\" />\n        your browser doesn't support video tag\n      </video>\n        </mat-tab>\n    </mat-tab-group>\n    <div></div>\n</div>","import { Component, OnInit, Input } from '@angular/core';\nimport { Game } from 'src/app/model';\n@Component({\n  selector: 'app-game-tabs',\n  templateUrl: './game-tabs.component.html',\n  styleUrls: ['./game-tabs.component.scss'],\n})\nexport class GameTabsComponent implements OnInit {\n  @Input() game: Game;\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n","<div class=\"details\">\n    <div class=\"game-banner\">\n        <img class=\"game-banner-img\" src=\"{{ game.background_image }}\" alt=\"background image\" />\n    </div>\n    <div class=\"game-content\">\n        <div class=\"details-wrapper\">\n            <div class=\"game-header\">\n                <h1 class=\"game-header-title\">{{ game.name }}</h1>\n                <h2 class=\"game-header-release-date\">\n                    Release: {{ game.released | date }}\n                </h2>\n                <p class=\"game-header-genres\">\n                    <span *ngFor=\"let genre of game.genres; let last = last\">{{ genre.name }}<span *ngIf=\"!last\">, </span></span>\n                </p>\n                <div class=\"game-gauge\" fxHide fxShow.gt-sm>\n                    <mwl-gauge class=\"two\" [max]=\"100\" [dialStartAngle]=\"170\" [dialEndAngle]=\"10\" [value]=\"gameRating\" [animated]=\"true\" [color]=\"getColor\" [animationDuration]=\"2\">\n                    </mwl-gauge>\n                    <a class=\"game-gauge-label\" target=\"_blank\" href=\"{{ game.metacritic_url }}\n          \">Metacritic</a\n          >\n        </div>\n      </div>\n\n      <app-game-tabs [game]=\"game\"></app-game-tabs>\n    </div>\n  </div>\n</div>","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute, Params } from '@angular/router';\nimport { Subscription } from 'rxjs';\n\nimport { HttpService } from 'src/app/services/http.service';\nimport { Game } from 'src/app/model';\n@Component({\n  selector: 'app-details',\n  templateUrl: './details.component.html',\n  styleUrls: ['./details.component.scss'],\n})\nexport class DetailsComponent implements OnInit, OnDestroy {\n  gameRating = 0;\n  gameId: string;\n  game: Game;\n  routeSub: Subscription;\n  gameSub: Subscription;\n\n  constructor(\n    private ActivatedRoute: ActivatedRoute,\n    private httpService: HttpService\n  ) {}\n\n  ngOnInit(): void {\n    this.routeSub = this.ActivatedRoute.params.subscribe((params: Params) => {\n      this.gameId = params['id'];\n      this.getGameDetails(this.gameId);\n    });\n  }\n\n  getGameDetails(id: string): void {\n    this.gameSub = this.httpService\n      .getGameDetails(id)\n      .subscribe((gameResp: Game) => {\n        this.game = gameResp;\n        setTimeout(() => {\n          this.gameRating = this.game.metacritic;\n        }, 1000);\n      });\n  }\n\n  getColor(value: number): string {\n    if (value > 75) {\n      return '#5ee432';\n    } else if (value > 50) {\n      return '#fffa50';\n    } else if (value > 30) {\n      return '#f7aa38';\n    } else {\n      return '#ef4655';\n    }\n  }\n\n  ngOnDestroy(): void {\n    if (this.gameSub) {\n      this.gameSub.unsubscribe;\n    }\n    if (this.routeSub) {\n      this.routeSub.unsubscribe;\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, Router } from '@angular/router';\n\nimport { AuthService } from './auth.service';\n// import { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\n//\n// implements CanActivate, CanActivateChild, CanDeactivate<unknown>, CanLoad\n//\nexport class AuthGuard implements CanActivate {\n  constructor(private _authService: AuthService, private _router: Router) {}\n\n  canActivate(): boolean {\n    if (this._authService.loggedIn()) {\n      return true;\n    } else {\n      this._router.navigate(['/login']);\n      return false;\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { HomeComponent } from './components/home/home.component';\nimport { LoginComponent } from './login/login.component';\nimport { RegisterComponent } from './register/register.component';\nimport { HomepageComponent } from './homepage/homepage.component';\nimport { DetailsComponent } from './components/details/details.component';\nimport { AuthGuard } from './auth.guard';\nconst routes: Routes = [\n  { path: 'default', component: HomepageComponent },\n  { path: '', component: HomepageComponent },\n  { path: 'home', component: HomeComponent, canActivate: [AuthGuard] },\n  {\n    path: 'search/:game-search',\n    component: HomeComponent,\n    canActivate: [AuthGuard],\n  },\n  {\n    path: 'details/:id',\n    component: DetailsComponent,\n  },\n  { path: 'login', component: LoginComponent },\n  { path: 'register', component: RegisterComponent },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n","import { Component, OnInit, EventEmitter, Output } from '@angular/core';\nimport { AuthService } from '../../auth.service';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\n@Component({\n  selector: 'app-sidenav',\n  templateUrl: './sidenav.component.html',\n  styleUrls: ['./sidenav.component.scss'],\n})\nexport class SidenavComponent implements OnInit {\n  @Output() closeSidenav = new EventEmitter<void>();\n  constructor(\n    public _authService: AuthService,\n    private _snackBar: MatSnackBar\n  ) {}\n\n  ngOnInit(): void {}\n  onClose() {\n    this.closeSidenav.emit();\n  }\n  onLogout() {\n    this._snackBar.open('Logged Out', 'Clear', { duration: 3000 });\n  }\n}\n","<mat-nav-list class=\"site-nav\" fxFlex fxLayout=\"column\" fxLayoutAlign=\"start start\" fxLayoutGap=\"10px\" style=\"margin-left: 16px; color: black\" style=\"margin-top: 20px !important; margin-left: 20px !important\">\n    <button class=\"site-nav\" mat-icon-button routerLink=\"/\" (click)=\"onClose()\">\n    <mat-icon class=\"nav-icon\" color=\"primary\">home</mat-icon>\n    Home\n  </button>\n    <button class=\"site-nav\" mat-icon-button routerLink=\"/home\" (click)=\"_authService.notLogged()\" routerLink=\"/home\" (click)=\"onClose()\">\n    <mat-icon class=\"nav-icon\" color=\"primary\">data_exploration</mat-icon>Our\n    Database\n  </button>\n\n    <button class=\"site-nav\" mat-icon-button routerLink=\"/login\" (click)=\"onClose()\">\n    <mat-icon class=\"nav-icon\" color=\"primary\">login</mat-icon>Login\n  </button>\n    <button class=\"site-nav\" mat-icon-button routerLink=\"/register\" (click)=\"onClose()\">\n    <mat-icon class=\"nav-icon\" color=\"primary\">account_box</mat-icon>Signup\n  </button>\n\n    <button class=\"site-nav\" mat-icon-button (click)=\"onLogout()\" (click)=\"onClose()\" (click)=\"_authService.logoutUser()\">\n    <mat-icon class=\"nav-icon\" color=\"primary\">logout</mat-icon>Logout\n  </button>\n    <button class=\"site-nav\" mat-icon-button (click)=\"onClose()\">\n    <mat-icon class=\"nav-icon\" color=\"primary\">keyboard_arrow_left</mat-icon\n    >Close\n  </button>\n</mat-nav-list>","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, NgForm } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../../auth.service';\n@Component({\n  selector: 'app-search-bar',\n  templateUrl: './search-bar.component.html',\n  styleUrls: ['./search-bar.component.scss'],\n})\nexport class SearchBarComponent implements OnInit {\n  constructor(private router: Router) {}\n\n  ngOnInit(): void {}\n\n   onSubmit(form: NgForm) {\n    this.router.navigate(['search', form.value.search]);\n  }\n   onPress() {\n    this.router.navigate(['']);\n  }\n   userLogin() {\n    this.router.navigate(['/login']);\n  }\n   userRegister() {\n    this.router.navigate(['/register']);\n  }\n}\n","<div class=\"search-bar\" fxFlex fxLayout fxLayoutAlign=\"flex-end end\">\n    <form class=\"search-form\" #form=\"ngForm\" (ngSubmit)=\"onSubmit(form)\">\n        <input class=\"search-input\" matInput name=\"search\" ngModel placeholder=\"Search 500,000+ games\" />\n    </form>\n</div>\n","<mat-toolbar color=\"primary\" fxFlex fxLayout fxLayoutAlign=\"flex-end center\">\n    <div fxShow.xs fxShow.sm fxHide.gt-sm>\n        <button mat-icon-button (click)=\"onToggleSidenav()\">\n      <mat-icon>menu</mat-icon>\n    </button>\n    </div>\n    <div>\n        <button mat-raised-button color=\"primary\" routerLink=\"\">\n      <mat-icon>image_search</mat-icon> Gamepedia\n    </button>\n    </div>\n    <div fxFlex fxLayout fxLayoutAlign=\"flex-end center\" fxShow.xs fxShow.sm fxHide.gt-sm>\n        <app-search-bar></app-search-bar>\n    </div>\n\n    <div fxFlex fxLayout fxLayoutAlign=\"flex-end center\" fxHide.xs fxHide.sm>\n        <app-search-bar></app-search-bar>\n    </div>\n\n    <!-- Login -->\n    <div fxFlex fxLayout fxLayoutAlign=\"flex-end center\" fxHide.xs fxHide.sm>\n        <button class=\"header-button\" mat-raised-button color=\"primary\" *ngIf=\"!_authService.loggedIn()\" routerLink=\"/login\">\n      Login\n    </button>\n        <!-- Signup           -->\n        <button class=\"header-button\" mat-raised-button color=\"primary\" *ngIf=\"!_authService.loggedIn()\" routerLink=\"/register\">\n      Signup\n    </button>\n        <!-- Logout -->\n        <button class=\"header-button\" mat-raised-button color=\"primary\" *ngIf=\"_authService.loggedIn()\" (click)=\"onLogout()\" (click)=\"_authService.logoutUser()\" routerLink=\"\">\n      Logout\n    </button>\n    </div>\n</mat-toolbar>\n","import { Component, OnInit, EventEmitter, Output } from '@angular/core';\nimport { NgForm,FormGroup } from '@angular/forms';\n\nimport { Router } from '@angular/router';\nimport { HomeComponent } from 'src/app/components/home/home.component';\nimport { AuthService } from '../../auth.service';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.scss'],\n})\nexport class HeaderComponent implements OnInit {\n  @Output() sidenavToggle = new EventEmitter<void>();\n  constructor(\n    private router: Router,\n    public _authService: AuthService,\n    private _snackBar: MatSnackBar\n  ) {}\n\n  ngOnInit(): void {}\n  onToggleSidenav() {\n    this.sidenavToggle.emit();\n  }\n onSubmit(form: NgForm) {\n    this.router.navigate(['search', form.value.search]);\n    console.log('Submitted'+form.value.search)\n  }\n  onClickSearch(form: NgForm){\n    this.router.navigate(['search',form.value.search]);\n    console.log('clicked'+form.value.search)\n  }\n\n  onLogout() {\n    this._snackBar.open('Logged Out', 'Clear', { duration: 3000 });\n  }\n}\n","import { Component } from '@angular/core';\nimport { AuthService } from './auth.service';\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent {\n  title = 'gamestore';\n  constructor(private _authService: AuthService) {}\n}\n","<mat-sidenav-container>\n    <mat-sidenav #sidenav role=\"navigation\" mode=\"side\">\n        <app-sidenav (closeSidenav)=\"sidenav.close()\"></app-sidenav>\n    </mat-sidenav>\n    <mat-sidenav-content>\n        <app-header (sidenavToggle)=\"sidenav.toggle()\"></app-header>\n        <main>\n            <!-- <app-post-create></app-post-create>\n            <app-post-list></app-post-list> -->\n            <router-outlet></router-outlet>\n        </main>\n    </mat-sidenav-content>\n</mat-sidenav-container>","import {\r\n  HttpEvent,\r\n  HttpHandler,\r\n  HttpInterceptor,\r\n  HttpRequest,\r\n} from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable()\r\nexport class HttpHeadersInterceptor implements HttpInterceptor {\r\n  constructor() {}\r\n\r\n  intercept(\r\n    req: HttpRequest<any>,\r\n    next: HttpHandler\r\n  ): Observable<HttpEvent<any>> {\r\n    req = req.clone({\r\n      setHeaders: {\r\n        'x-rapidapi-key': 'e44f5d0df9msh4ef76cb13184d25p1c82d4jsn372f021cfb11',\r\n        'x-rapidapi-host': 'rawg-video-games-database.p.rapidapi.com',\r\n      },\r\n      setParams: {\r\n        key: 'abe42c87cd464991914fa12b2482a324',\r\n      },\r\n    });\r\n    return next.handle(req);\r\n  }\r\n}\r\n","import {\r\n  HttpEvent,\r\n  HttpHandler,\r\n  HttpInterceptor,\r\n  HttpRequest,\r\n} from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, throwError as observableThrowError } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\n\r\n@Injectable()\r\nexport class HttpErrorsInterceptor implements HttpInterceptor {\r\n  constructor() {}\r\n\r\n  intercept(\r\n    req: HttpRequest<any>,\r\n    next: HttpHandler\r\n  ): Observable<HttpEvent<any>> {\r\n    return next.handle(req).pipe(\r\n      catchError((err) => {\r\n        console.log(err);\r\n        return observableThrowError(err);\r\n      })\r\n    );\r\n  }\r\n}\r\n","import { Injectable, Injector } from '@angular/core';\nimport { HttpInterceptor } from '@angular/common/http';\nimport { AuthService } from './auth.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TokenInterceptorService implements HttpInterceptor {\n  constructor(private injector: Injector) {}\n\n  intercept(req, next) {\n    let authService = this.injector.get(AuthService);\n    let tokenizedReq = req.clone({\n      setHeaders: {\n        Authorization: `Bearer ${authService.getToken()}`,\n      },\n    });\n\n    return next.handle(tokenizedReq);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n//Forms\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { GaugeModule } from 'angular-gauge';\n//Flex Layout//\n\nimport { FlexLayoutModule } from '@angular/flex-layout';\n\n//MatModules//\n\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatSelectModule } from '@angular/material/select';\nimport { SearchBarComponent } from './components/search-bar/search-bar.component';\nimport { HomeComponent } from './components/home/home.component';\nimport { HttpHeadersInterceptor } from './interceptors/http-headers.interceptor';\nimport { HttpErrorsInterceptor } from './interceptors/http-errors.interceptor';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatDividerModule } from '@angular/material/divider';\n\n//\n\n// Angular Bootstrap\n\nimport { MatCarouselModule } from '@ngbmodule/material-carousel';\n\n// App Components //\n\nimport { RegisterComponent } from './register/register.component';\nimport { LoginComponent } from './login/login.component';\n\nimport { HeaderComponent } from './navigation/header/header.component';\nimport { SidenavComponent } from './navigation/sidenav/sidenav.component';\nimport { HomepageComponent } from './homepage/homepage.component';\n//\n// For Authentication //\nimport { AuthGuard } from './auth.guard';\nimport { AuthService } from './auth.service';\nimport { TokenInterceptorService } from './token-interceptor.service';\nimport { DetailsComponent } from './components/details/details.component';\nimport { GameTabsComponent } from './components/game-tabs/game-tabs.component';\n\n//\n@NgModule({\n  declarations: [\n    AppComponent,\n    SearchBarComponent,\n    HomeComponent,\n    RegisterComponent,\n    LoginComponent,\n    HeaderComponent,\n    SidenavComponent,\n    HomepageComponent,\n    DetailsComponent,\n    GameTabsComponent,\n  ],\n  imports: [\n    FlexLayoutModule,\n    BrowserModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    FormsModule,\n    HttpClientModule,\n    GaugeModule.forRoot(),\n    MatTabsModule,\n    MatIconModule,\n    MatFormFieldModule,\n    MatSelectModule,\n    MatCardModule,\n    MatToolbarModule,\n    MatButtonModule,\n    MatInputModule,\n    ReactiveFormsModule,\n    MatMenuModule,\n    MatSidenavModule,\n    MatSnackBarModule,\n    MatCarouselModule.forRoot(),\n    MatDividerModule,\n  ],\n  providers: [\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: HttpHeadersInterceptor,\n      multi: true,\n    },\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: HttpErrorsInterceptor,\n      multi: true,\n    },\n    AuthService,\n    AuthGuard,\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: TokenInterceptorService,\n      multi: true,\n    },\n  ],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}